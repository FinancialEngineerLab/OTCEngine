#include "kdb_date.hpp"
//#include "Swap__Ahn.hpp"

int m_days[12]={0,31,59,90,120,151,181,212,243,273,304,334};

/************************************************************************/
// generate periodical payment dates based on scheduled_term (eg. 3month) and
// BizDayConv(1=following, 2=preceding, default=modified following)
/************************************************************************/
vector<date> k_dt_scheduleGenerator(date startDate,int numRollover,int schedule_term,int BizDayConv,calendar calendar_)
{
	int i;
	vector<date> dt(numRollover);
	vector<date> adj_dt(numRollover);
	for(i=0;i<numRollover;i++)
	{
		dt[i]=k_dt_month_adder(startDate,schedule_term*(i+1));
		adj_dt[i]=k_dt_workday(dt[i],BizDayConv,calendar_);
	}
	return adj_dt;
}

/************************************************************************/
// find the last day of any month
// for February, it could be 28 or 29 depending the year(eg. leap year)
/************************************************************************/
int k_dt_getLastDayOfMonth(date dt)
{
	int last_day;
	if(dt.month<12)
		last_day=m_days[dt.month]-m_days[dt.month-1];
	else
		last_day=31;

	if(!(dt.year & 3))
	{
		if(dt.month==FEB)
		{
			last_day=29;
		}
	}
	return last_day;
}

/************************************************************************/
// caculate number of days between two dates according to the day count convention
// DayCountConv: 1=30days for any month, default=actual days
/************************************************************************/
int k_dt_numDays(date dt1, date dt2, int DayCountConv)
{
	long count1, count2;
	switch(DayCountConv)
	{	
	case 1: //30/360
		count1=max(0,30-dt1.day)+min(30,dt2.day)+360*(dt2.year-dt1.year)+30*(dt2.month-dt1.month-1);
		return count1;
	default: //Actual
		count1=k_dt_date_to_count(dt1);
		count2=k_dt_date_to_count(dt2);
		return count2-count1;
	}	
}


/************************************************************************/
// caculate faction in year between two dates according to the day count convention
// DayCountConv: 1=30/360, 2=Actual/360, 3=Actual/Actual, default=A/365
/************************************************************************/
double k_dt_yearFrac(date dt1,date dt2, int DayCountConv)
{
	long days;
	long days_in_leap_year, days_in_regular_year;
	double part_in_leap_year, part_in_regular_year;
	switch(DayCountConv)
	{
	case 1:  //30/360
		days=k_dt_numDays(dt1,dt2,1);
		return (double)days/360;
	case 2: //A/360
		days=k_dt_numDays(dt1,dt2,0);		
		return (double)days/360.0;
	case 3:	//Act/Act
		date year_end;
		date year_first;
		year_end=dt1.year*10000+1231;
		year_first=(dt1.year+1)*10000+101;

		if(k_dt_is_leap_year(dt1.year)==1)
		{
			days_in_leap_year=year_end-dt1;
			days_in_regular_year=dt2-year_first;
			days_in_regular_year+=1;
		}
		else if(k_dt_is_leap_year(dt2.year)==1)
		{
			days_in_regular_year=year_end-dt1;
			days_in_leap_year=dt2-year_first;
			days_in_leap_year+=1;
		}
		else
		{
			days_in_leap_year=0;
			days_in_regular_year=dt2-dt1;
		}
		part_in_leap_year	=(double)days_in_leap_year/366.0;
		part_in_regular_year=(double)days_in_regular_year/365.0;
		return part_in_leap_year+part_in_regular_year;

	default: //A/365
		days=k_dt_numDays(dt1,dt2,0);		
		return (double)days/365.0;
	}
}

double k_dt_yearFrac(int dt1,int dt2, int DayCountConv)
{
	return k_dt_yearFrac(k_dt_count_to_date(dt1),k_dt_count_to_date(dt2),DayCountConv);
}

/************************************************************************/
// adding days to given date
//
/************************************************************************/
date operator+(const date &a, long b)
{
	long count;
	date dt;
	count=k_dt_date_to_count(a)+b;
	dt=k_dt_count_to_date(count);
	return dt;		
}

/************************************************************************/
// deducting days from given date.
//
/************************************************************************/
date operator-(const date &a, long b)
{
	long count;
	date dt;
	count=k_dt_date_to_count(a)-b;
	dt=k_dt_count_to_date(count);
	return dt;		
}
/************************************************************************/
// counting number of days
//
/************************************************************************/
int operator-(const date &a, const date &b)
{
	int count;
	count=k_dt_date_to_count(a)-k_dt_date_to_count(b);
	return count;		
}


int k_dt_holiday_search(vector<long> hdays,int size,int key)
{     int lb=0,ub=size-1,mid;             //lb=>lower bound,ub=>upper bound
      int tf=0; 
	
     for(;lb<= ub;)
     {
           mid=(lb+ub)/2;
 
           if(hdays[mid] == key)
           {
              tf = 1;  
			  return(tf);
			  
           } 
           else
               if(hdays[mid]< key)
                  lb=mid+1;
           else
               if (hdays[mid]>key)
                  ub=mid-1;
      }
 
	  return(tf);
	 
}
vector<int> k_dt_vday_shift(vector<int> dts,calendar cal, int n, int direction)
{
	int Sz=(int)dts.size();
	vector<int> dts_shifted(Sz);
	for(int i=0;i<Sz;i++)
		dts_shifted[i]=k_dt_day_shift(k_dt_count_to_date(dts[i]),cal,n,direction);
	return dts_shifted;
}


long k_dt_day_shift(date dt,calendar cal,int n, int direction){
// dt: business date !!!
// direction=-1: proceeding, direction = 1: following

	long count, adj_count;

	int ilast;
	int j;
    int NH;

	count=k_dt_date_to_count(dt);
	adj_count=count;
	vector<long> hdays;

	k_dt_getHolidays(hdays,cal);
	ilast= (int)hdays.size()-1;

	for(j=0; j < n; j++){

		adj_count = adj_count + direction;
        
        NH = k_dt_holiday_search(hdays,ilast,adj_count);

		for(;(NH != 0) || (k_dt_week(adj_count) == 0) || (k_dt_week(adj_count) == 1);){
			if (NH != 0){
				adj_count = adj_count + direction;
			}
			if (k_dt_week(adj_count) == 0){
				if (direction == 1){
			     	adj_count = adj_count + 2*direction;
				}
				else{
                    adj_count = adj_count + direction;
				}
    		}
			if (k_dt_week(adj_count) == 1){
				if (direction == 1){
				    adj_count = adj_count + direction;
				}
				else{
				    adj_count = adj_count+ 2*direction;
				}
			}	
			NH = k_dt_holiday_search(hdays,ilast,adj_count);
		}
	}
	return(adj_count); 
}


/************************************************************************/
// shifting date to business date according to the business day convention
// BizDayConv: 1=following, 2=preceding, default=modified following
/************************************************************************/
//	CHO Hangseob's version with much simpler logic at 2010-02-25
date k_dt_workday(date dt, int BizDayConv, calendar calendar_)
{
	if(k_dt_is_bizDay(dt,calendar_)) return dt;
	
	switch(BizDayConv)
	{
	case 1://following
		return k_dt_workday(dt+1, BizDayConv, calendar_);
	case 2://preceding
		return k_dt_workday(dt-1, BizDayConv, calendar_);
	default://modified following
		if(k_dt_getLastDayOfMonth(dt)==dt.day)
			return k_dt_workday(dt-1, 2, calendar_);
		else
			return k_dt_workday(dt+1, BizDayConv, calendar_);
	}
}

/*
//	Ahn Janmin modified Chang Kicheon's origianl Jan 2009
//	CHO Hangseob corrected AHN Jamin's bug at 2010-02-25
date k_dt_workday(date dt, int BizDayConv, calendar calendar_)
{
	long adj_count;
	long count;
    long NH;
	long direction;
	int ilast;

	vector<long> hdays;

	k_dt_getHolidays(hdays,calendar_);
	ilast= (int)hdays.size()-1;

	count = k_dt_date_to_count(dt);
    adj_count = count;

	
     
	switch(BizDayConv)
	{
	case 1: // following
		    direction = 1;
			break;
	case 2: //preceding
		    direction = -1;
			break;
	default: // modified following
			direction = 1;	
			break;
	}

	long debug_t;

	NH = k_dt_holiday_search(hdays,ilast,adj_count);
	debug_t = k_dt_week(adj_count);

	for(;(NH != 0) || (k_dt_week(adj_count) == 0) || (k_dt_week(adj_count) == 1);){
			if (NH != 0){
				adj_count = adj_count + direction;
			}
			if (k_dt_week(adj_count) == 0){
				if (direction == 1){
			     	adj_count = adj_count + 2*direction;
				}
				else{
                    adj_count = adj_count + direction;
				}
			}
			if (k_dt_week(adj_count) == 1){
				if (direction == 1){
				    adj_count = adj_count + direction;
				}
				else{
				    adj_count = adj_count+ 2*direction;
				}
			}	
			NH = k_dt_holiday_search(hdays,ilast,adj_count);
	}

	date adj_dt;
    adj_dt=k_dt_count_to_date(adj_count);

	if ((BizDayConv != 1) && (BizDayConv != 2)){ 
	    
		if(dt.month==adj_dt.month)
			return adj_dt;
		else return( k_dt_workday(dt, 2, calendar_) );
	}
	else{
		return(adj_dt);
	}
	
}
*/

/*
Chang Kicheon's origianl

date k_dt_workday(date dt,int BizDayConv, calendar calendar_)
{
	switch(BizDayConv)
	{
	case 1://following
		return k_dt_workday_intrim(dt,1,calendar_);
	case 2://preceding
		return k_dt_workday_intrim(dt,-1,calendar_);
	default:
		//modified following
		int count;
		date adj_dt;
		count=k_dt_date_to_count(dt);
		adj_dt=k_dt_workday_intrim(dt,1,calendar_);
		if(dt.month==adj_dt.month)
			return adj_dt;
		return k_dt_workday_intrim(dt,-1,calendar_);				
	}
} */

/************************************************************************/
// shifting date to business date according to Following and Preceding convention
// direction: 1=following, (-1)=preceding
/************************************************************************/
date k_dt_workday_intrim(date dt,int direction,calendar calendar_)
{
	long count, adj_count;
	int i,ilast=0;
	count=k_dt_date_to_count(dt);
	adj_count=count;
	vector<long> hdays;
	k_dt_getHolidays(hdays,calendar_);

See_you_again:
	//check Sunday and Saturday
	adj_count=k_dt_workday(adj_count,direction);
	//check public holiday
	for(i=ilast;i<(int)hdays.size();i++)
	{
		if(adj_count==hdays[i])
		{
			adj_count=adj_count+direction;
			ilast=i;
			goto See_you_again;
		}
		if(hdays[i]>adj_count)
			break;
	}
	return k_dt_count_to_date(adj_count);
}

/************************************************************************/
// converting date to integer(ymd_format)
//
/************************************************************************/
int k_dt_date_to_yyyymmdd(date dt)
{
	int yyyymmdd;
	yyyymmdd=dt.year*10000;
	yyyymmdd=yyyymmdd+dt.month*100;
	yyyymmdd=yyyymmdd+dt.day;	
	return yyyymmdd;
}

/************************************************************************/
//get system date
//
/************************************************************************/
date k_dt_Today()
{
	date tday;
	time_t xDate;
	time(&xDate);
	tm *today=localtime(&xDate);
	tday.year=today->tm_year+1900;
	tday.month=today->tm_mon+1;
	tday.day=today->tm_mday;

	return tday;
}


/************************************************************************/
// get k_dt_weekday from base_date
/* 0=Saturday, 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday
/************************************************************************/
long k_dt_week(long base_date)
{
	int k_dt_week=int(fmod(double(base_date),7.0));
	return k_dt_week; //0=SAT, 1=SUN
}

/************************************************************************/
// returns the date after adding number of month to the given date
//
/************************************************************************/
date k_dt_month_adder(date dt, long add_month)
{
	date dtx;
	dtx=dt;
	int remainder=int(fmod(double(add_month),12.0));
	int add_year=(add_month-remainder)/12;

	if (fmod(double(add_month),12.0)==0.0)
	{
		dtx.year=dt.year+add_year;
		dtx.day=min(dtx.day,k_dt_getLastDayOfMonth(dtx));
		return dtx;
	}
	else if(dt.month+remainder<=12)
	{
		dtx.year=dt.year+add_year;
		dtx.month=dt.month+remainder;
		dtx.day=min(dtx.day,k_dt_getLastDayOfMonth(dtx));
		return dtx;
	}
	else{
		dtx.year=dt.year+add_year+1;
		dtx.month=dt.month+remainder-12;		
		dtx.day=min(dtx.day,k_dt_getLastDayOfMonth(dtx));
		return dtx;
	}
}
/************************************************************************/
// converts the date to long(count)
// input_argument is 3 integers for year, month and day
/************************************************************************/
long k_dt_date_to_count(long dt_year, long dt_month,long dt_day )
{
	date dt;
	dt.year=dt_year;
	dt.month=dt_month;
	dt.day=dt_day;

	return k_dt_date_to_count(dt);
}
/************************************************************************/
// converts date to long(count)
// input_argument is "date" class
/************************************************************************/
long k_dt_date_to_count(date dt)
{
	return 1+dt.day+
		   m_days[dt.month-JAN]+
		   (dt.month>FEB && ! (dt.year & 3))+ // if month>2 and leap year, then add 1
		   dt.year*365+
		   ((dt.year-1)>>2) //add 1s for all leap year before today
		   -693975;//to match Excel day_number
}

/************************************************************************/
// converts long(count) to date
//
/************************************************************************/
date k_dt_count_to_date(long icount)
{
	date dt;
	icount=icount+693975; //to match Excel day_number, add 693975

	dt.year=(--icount<<2)/1461;
	dt.day=icount-dt.year*365-((dt.year-1)>>2);

	for (dt.month=JAN; dt.month<MAR;dt.month++)
	{
		if(m_days[dt.month]>=dt.day)
		{
			dt.day-=m_days[dt.month-1];
			return dt;
		}
	}
	//LEAP YEAR
	if(!(dt.year & 3))
	{
		if(m_days[FEB]== --dt.day)
		{
			dt.day=29;
			dt.month=FEB;
			return dt;
		}
	}
	for(;dt.month<DEC;dt.month++)
		if(m_days[dt.month]>=dt.day)
			break;
	dt.day-=m_days[dt.month-1];
	return dt;
}

/************************************************************************/
// shifting the date to business date according to direction,
// just considering k_dt_weekends(Sunday and Saturday)
/************************************************************************/
long k_dt_workday(long base_date, long direction)
{
	if(direction==1)
	{
		if (k_dt_week(base_date)==0)
			return base_date+2;
		else if(k_dt_week(base_date)==1)
			return base_date+1;
		else
			return base_date;
	}
	else if(direction==-1)
	{
		if (k_dt_week(base_date)==0)
			return base_date-1;
		else if(k_dt_week(base_date)==1)
			return base_date-2;
		else
			return base_date;
	}
	return base_date;
}


/************************************************************************/
// converts integer(ymd_type) to date class
//
/************************************************************************/
date k_dt_yyyymmdd_to_date(int YYYYMMDD)
{
	date dt;
	dt.year=int(YYYYMMDD/10000);
	dt.month=int((YYYYMMDD-dt.year*10000)/100);
	dt.day=(YYYYMMDD-dt.year*10000-dt.month*100);	
	return dt;
	//error check need: what if "20081347" entered?
}

/************************************************************************/
// returns k_dt_weekdate for given date(integer(ymd_format))
// 
/************************************************************************/
int k_dt_weekDate(int iYYYYMMDD)
{
	date dt;
	dt=k_dt_yyyymmdd_to_date(iYYYYMMDD);
	return k_dt_week(k_dt_date_to_count(dt));
}
/************************************************************************/
// returns k_dt_weekdate for given date class
//
/************************************************************************/
int k_dt_weekDate(date dt)
{
	int yyyymmdd;
	yyyymmdd=	k_dt_date_to_yyyymmdd(dt);
	return		k_dt_weekDate(yyyymmdd);
}
/************************************************************************/
// give 1 if the year is leap year,
// otherwise 0
/************************************************************************/
int				k_dt_is_leap_year(int year)
{
	return ! (year & 3);
}
//=============================================================
//	return 1 if dt is working business day
//	return 0 if dt is sunday or saturday or holiday
//=============================================================
int k_dt_is_bizDay(date dt, calendar calendar_)
{
	long	count = k_dt_date_to_count(dt);
	//check Sunday and Saturday
	if(k_dt_week(count)<2) return 0;
	
	//check public holiday
	vector<long> hdays;
	k_dt_getHolidays(hdays,calendar_);
	int	hdays_size = (int)hdays.size();
	for(int i=0; i<hdays_size; i++)
	{
		if(count==hdays[i]) return 0;
	}
	return 1;
}
/************************************************************************/
// returns vector of public holidays
// to hard-coding the holiday schedules
/************************************************************************/
void			k_dt_getHolidays(vector<long> &hdays,calendar calendar_ )
{
	switch(calendar_)
	{
	case SEOUL:
		k_dt_getHolidays_SEOUL(hdays);
		break;
	case NEW_YORK:
		k_dt_getHolidays_NEW_YORK(hdays);
		break;
	case TARGET:
		k_dt_getHolidays_TARGET(hdays);
		break;
	case TOKYO:
		k_dt_getHolidays_TOKYO(hdays);
		break;
	case NEW_YORK_LONDON:
		k_dt_getHolidays_NEW_YORK_LONDON(hdays);
		break;
	case LONDON:
		k_dt_getHolidays_LONDON(hdays);
		break;
	case SEOUL_NEW_YORK:
		k_dt_getHolidays_SEOUL_NEW_YORK(hdays);
		break;
	case TARGET_NEW_YORK:
		k_dt_getHolidays_TARGET_NEW_YORK(hdays);
		break;
	case TOKYO_NEW_YORK:
		k_dt_getHolidays_TOKYO_NEW_YORK(hdays);
		break;
	//default:
	//	k_dt_getHolidays_SEOUL(hdays);
	//	break;
	}
}

date k_dt_getSpotDate(date dt, calendar calendar_)
{
	date r_dt;
	switch(calendar_)
	{
	case SEOUL:
		r_dt=k_dt_count_to_date(k_dt_day_shift(dt,calendar_,1,1));
		break;
	case NEW_YORK:
		r_dt=k_dt_count_to_date(k_dt_day_shift(dt,calendar_,2,1));
		break;
	case TARGET:
		r_dt=k_dt_count_to_date(k_dt_day_shift(dt,calendar_,2,1));
		break;
	case TOKYO:
		r_dt=k_dt_count_to_date(k_dt_day_shift(dt,calendar_,2,1));
		break;
	case NEW_YORK_LONDON:
		r_dt=k_dt_count_to_date(k_dt_day_shift(dt,calendar_,2,1));
		break;
	case LONDON:
		r_dt=k_dt_count_to_date(k_dt_day_shift(dt,calendar_,2,1));
		break;
	case SEOUL_NEW_YORK: // for CRS
		r_dt=k_dt_count_to_date(k_dt_day_shift(dt,calendar_,2,1));
		break;
	}
	
	return r_dt;
}


/* date			k_dt_getSpotDate(date dt, calendar calendar_)
{
	date r_dt;
	switch(calendar_)
	{
	case SEOUL:
		r_dt=k_dt_workday(dt+1,1,calendar_);
		break;
	case NEW_YORK:
		r_dt=k_dt_workday(k_dt_workday(dt+1,1,calendar_)+1,1,calendar_);
		break;
	case TARGET:
		r_dt=k_dt_workday(k_dt_workday(dt+1,1,calendar_)+1,1,calendar_);
		break;
	case TOKYO:
		r_dt=k_dt_workday(k_dt_workday(dt+1,1,calendar_)+1,1,calendar_);
		break;
	case NEW_YORK_LONDON:
		r_dt=k_dt_workday(k_dt_workday(dt+1,1,calendar_)+1,1,calendar_);
		break;
	case LONDON:
		r_dt=k_dt_workday(k_dt_workday(dt+1,1,calendar_)+1,1,calendar_);
		break;
	case SEOUL_NEW_YORK:
		r_dt=k_dt_workday(k_dt_workday(dt+1,1,calendar_)+1,1,calendar_);
		break;
	case TARGET_NEW_YORK:
		r_dt=k_dt_workday(k_dt_workday(dt+1,1,calendar_)+1,1,calendar_);
		break;
	case TOKYO_NEW_YORK:
		r_dt=k_dt_workday(k_dt_workday(dt+1,1,calendar_)+1,1,calendar_);
		break;
	//default:
	//	r_dt=k_dt_workday(dt+1,1,calendar_);
	//	break;
	}
	return r_dt;
} */

void k_dt_getHolidays_SEOUL(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36154,
	36161,
	36206,
	36207,
	36208,
	36220,
	36255,
	36285,
	36426,
	36427,
	36560,
	36586,
	36621,
	36647,
	36651,
	36657,
	36683,
	36724,
	36753,
	36780,
	36781,
	36782,
	36802,
	36885,
	36892,
	36914,
	36915,
	36916,
	36951,
	36986,
	37012,
	37048,
	37089,
	37118,
	37165,
	37166,
	37167,
	37250,
	37257,
	37298,
	37299,
	37300,
	37316,
	37351,
	37377,
	37413,
	37420,
	37438,
	37454,
	37483,
	37519,
	37532,
	37609,
	37615,
	37622,
	37652,
	37742,
	37746,
	37749,
	37778,
	37819,
	37848,
	37874,
	37875,
	37876,
	37897,
	37980,
	37987,
	38007,
	38008,
	38009,
	38047,
	38082,
	38092,
	38112,
	38133,
	38257,
	38258,
	38259,
	38391,
	38392,
	38393,
	38412,
	38447,
	38477,
	38509,
	38579,
	38614,
	38628,
	38747,
	38777,
	38838,
	38842,
	38868,
	38874,
	38915,
	38944,
	38993,
	38995,
	38996,
	39076,
	39083,
	39132,
	39142,
	39203,
	39226,
	39239,
	39280,
	39309,
	39349,
	39350,
	39351,
	39358,
	39435,
	39441,
	39448,
	39484,
	39485,
	39486,
	39547,
	39569,
	39573,
	39580,
	39605,
	39675,
	39706,
	39724,
	39807,
	39814,
	39839,
	39840,
	39934,
	39938,
	40088,
	40172,
	40179,
	40224,
	40238,
	40303,
	40319,
	40331,
	40442,
	40443,
	40444,
	40576,
	40577,
	40578,
	40603,
	40668,
	40673,
	40700,
	40770,
	40798,
	40799,
	40819,
	40931,
	40932,
	40969,
	41010,
	41030,
	41057,
	41066,
	41136,
	41183,
	41185,
	41268,
	41275,
	41316,
	41334,
	41395,
	41411,
	41431,
	41501,
	41535,
	41536,
	41537,
	41550,
	41633,
	41640,
	41669,
	41670,
	41760,
	41764,
	41765,
	41796,
	41866,
	41890,
	41891,
	41915,
	41998,
	42005,
	42053,
	42054,
	42055,
	42125,
	42129,
	42149,
	42275,
	42363,
	42370,
	42430,
	42495,
	42527,
	42597,
	42646,
	42795,
	42856,
	42858,
	42860,
	42892,
	42962,
	43011,
	43012,
	43013,
	43094,
	43101,
	43146,
	43147,
	43160,
	43221,
	43257,
	43327,
	43367,
	43368,
	43376,
	43459,
	43466,
	43525,
	43586,
	43622,
	43692,
	43741,
	43824,
	43831,
	43952,
	43956,
	44190,
	44197,
	44256,
	44321,
	44621,
	44686,
	44718,
	44788,
	44837,
	44986,
	45047,
	45051,
	45083,
	45153,
	45202,
	45285,
	45292,
	45352,
	45413,
	45449,
	45519,
	45568,
	45651,
	45658,
	45778,
	45782,
	45814,
	45884,
	45933,
	46016,
	46023,
	46143,
	46147,
	46381,
	46388,
	46447,
	46512,
	46813,
	46874,
	46878,
	46910,
	46980,
	47029,
	47112,
	47119,
	47178,
	47239,
	47275,
	47345,
	47394,
	47477};
	//}



	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}
void k_dt_getHolidays_NEW_YORK(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36161,
	36178,
	36206,
	36311,
	36345,
	36346,
	36409,
	36444,
	36475,
	36489,
	36519,
	36521,
	36522,
	36523,
	36524,
	36525,
	36526,
	36528,
	36529,
	36530,
	36531,
	36532,
	36542,
	36577,
	36675,
	36711,
	36773,
	36808,
	36841,
	36853,
	36885,
	36892,
	36906,
	36941,
	37039,
	37076,
	37137,
	37172,
	37206,
	37207,
	37217,
	37250,
	37257,
	37277,
	37305,
	37403,
	37441,
	37501,
	37543,
	37571,
	37588,
	37615,
	37622,
	37641,
	37669,
	37767,
	37806,
	37865,
	37907,
	37936,
	37952,
	37980,
	37987,
	38005,
	38033,
	38138,
	38172,
	38173,
	38236,
	38271,
	38302,
	38316,
	38346,
	38353,
	38369,
	38404,
	38502,
	38537,
	38600,
	38635,
	38667,
	38680,
	38711,
	38712,
	38718,
	38719,
	38733,
	38768,
	38821,
	38866,
	38902,
	38964,
	38999,
	39032,
	39044,
	39076,
	39083,
	39097,
	39132,
	39230,
	39267,
	39328,
	39363,
	39397,
	39398,
	39408,
	39441,
	39448,
	39468,
	39496,
	39528,
	39594,
	39633,
	39692,
	39734,
	39763,
	39779,
	39807,
	39814,
	39832,
	39860,
	39958,
	39997,
	39998,
	40063,
	40098,
	40128,
	40143,
	40172,
	40179,
	40196,
	40224,
	40270,
	40329,
	40363,
	40364,
	40427,
	40462,
	40493,
	40507,
	40537,
	40544,
	40560,
	40595,
	40655,
	40693,
	40728,
	40791,
	40826,
	40858,
	40871,
	40902,
	40903,
	40909,
	40910,
	40924,
	40959,
	41005,
	41057,
	41094,
	41155,
	41190,
	41224,
	41225,
	41235,
	41268,
	41275,
	41295,
	41323,
	41362,
	41421,
	41459,
	41519,
	41561,
	41589,
	41606,
	41633,
	41640,
	41659,
	41687,
	41747,
	41785,
	41824,
	41883,
	41925,
	41954,
	41970,
	41998,
	42005,
	42023,
	42051,
	42097,
	42149,
	42188,
	42189,
	42254,
	42289,
	42319,
	42334,
	42363,
	42370,
	42387,
	42415,
	42454,
	42520,
	42555,
	42618,
	42653,
	42685,
	42698,
	42729,
	42730,
	42736,
	42737,
	42751,
	42786,
	42839,
	42884,
	42920,
	42982,
	43017,
	43050,
	43062,
	43094,
	43101,
	43115,
	43150,
	43189,
	43248,
	43285,
	43346,
	43381,
	43415,
	43416,
	43426,
	43459,
	43466,
	43486,
	43514,
	43574,
	43612,
	43650,
	43710,
	43752,
	43780,
	43797,
	43824,
	43831,
	43850,
	43878,
	43931,
	43976,
	44015,
	44016,
	44081,
	44116,
	44146,
	44161,
	44190,
	44197,
	44214,
	44242,
	44347,
	44381,
	44382,
	44445,
	44480,
	44511,
	44525,
	44555,
	44562,
	44578,
	44613,
	44711,
	44746,
	44809,
	44844,
	44876,
	44889,
	44920,
	44921,
	44927,
	44928,
	44942,
	44977,
	45075,
	45111,
	45173,
	45208,
	45241,
	45253,
	45285,
	45292,
	45306,
	45341,
	45439,
	45477,
	45537,
	45579,
	45607,
	45624,
	45651,
	45658,
	45677,
	45705,
	45803,
	45842,
	45901,
	45943,
	45972,
	45988,
	46016,
	46023,
	46041,
	46069,
	46167,
	46207,
	46272,
	46307,
	46337,
	46352,
	46381,
	46388,
	46405,
	46433,
	46538,
	46572,
	46573,
	46636,
	46671,
	46702,
	46716,
	46746,
	46753,
	46769,
	46804,
	46902,
	46938,
	47000,
	47035,
	47068,
	47080,
	47112,
	47119,
	47133,
	47168,
	47266,
	47303,
	47364,
	47399,
	47433,
	47434,
	47444,
	47477,
	47504,
	47532,
	47630,
	47728,
	47770,
	47815,
	47868,
	47896,
	47994,
	48092,
	48134,
	48179,
	48232,
	48260,
	48365,
	48400,
	48463,
	48498,
	48543,
	48596,
	48631,
	48729,
	48827,
	48862,
	48907,
	48939,
	48946,
	48960,
	48995,
	49093,
	49191,
	49226,
	49271,
	49324,
	49359,
	49457,
	49555,
	49590,
	49625,
	49635};
	//}



	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}
void k_dt_getHolidays_LONDON(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36161,
	36519,
	36520,
	36526,
	36885,
	36886,
	36892,
	36994,
	36997,
	37018,
	37039,
	37130,
	37250,
	37251,
	37257,
	37344,
	37347,
	37382,
	37411,
	37494,
	37615,
	37616,
	37622,
	37729,
	37732,
	37746,
	37767,
	37858,
	37980,
	37981,
	37987,
	38086,
	38089,
	38110,
	38138,
	38229,
	38346,
	38347,
	38348,
	38349,
	38353,
	38355,
	38436,
	38439,
	38474,
	38502,
	38593,
	38711,
	38712,
	38713,
	38718,
	38719,
	38821,
	38824,
	38838,
	38866,
	38957,
	39076,
	39077,
	39083,
	39178,
	39181,
	39209,
	39230,
	39321,
	39441,
	39442,
	39448,
	39528,
	39531,
	39573,
	39594,
	39685,
	39807,
	39808,
	39814,
	39913,
	39916,
	39937,
	39958,
	40056,
	40172,
	40173,
	40175,
	40179,
	40270,
	40273,
	40301,
	40329,
	40420,
	40537,
	40538,
	40539,
	40540,
	40544,
	40546,
	40655,
	40658,
	40665,
	40693,
	40784,
	40902,
	40903,
	40904,
	40909,
	40910,
	41005,
	41008,
	41036,
	41057,
	41148,
	41268,
	41269,
	41275,
	41362,
	41365,
	41400,
	41421,
	41512,
	41633,
	41634,
	41640,
	41747,
	41750,
	41764,
	41785,
	41876,
	41998,
	41999,
	42005,
	42097,
	42100,
	42128,
	42149,
	42247,
	42363,
	42364,
	42366,
	42370,
	42454,
	42457,
	42492,
	42520,
	42611,
	42729,
	42730,
	42731,
	42736,
	42737,
	42839,
	42842,
	42856,
	42884,
	42975,
	43094,
	43095,
	43101,
	43189,
	43192,
	43227,
	43248,
	43339,
	43459,
	43460,
	43466,
	43574,
	43577,
	43591,
	43612,
	43703,
	43824,
	43825,
	43831,
	43931,
	43934,
	43955,
	43976,
	44074,
	44190,
	44191,
	44193,
	44197,
	44288,
	44291,
	44319,
	44347,
	44438,
	44555,
	44556,
	44557,
	44558,
	44562,
	44564,
	44666,
	44669,
	44683,
	44711,
	44802,
	44920,
	44921,
	44922,
	44927,
	44928,
	45023,
	45026,
	45047,
	45075,
	45166,
	45285,
	45286,
	45292,
	45380,
	45383,
	45418,
	45439,
	45530,
	45651,
	45652,
	45658,
	45765,
	45768,
	45782,
	45803,
	45894,
	46016,
	46017,
	46023,
	46115,
	46118,
	46146,
	46167,
	46265,
	46381,
	46382,
	46384,
	46388,
	46472,
	46475,
	46510,
	46629,
	46746,
	46747,
	46748,
	46749,
	46753,
	46755,
	46857,
	46860,
	46874,
	46902,
	46993,
	47112,
	47113,
	47119,
	47207,
	47210,
	47245,
	47266,
	47357,
	47477,
	47478,
	47592,
	47595,
	47609,
	47630,
	47721,
	47949,
	47952,
	47973,
	47994,
	48085,
	48299,
	48302,
	48337,
	48365,
	48456,
	48575,
	48576,
	48582,
	48684,
	48687,
	48701,
	48729,
	48820,
	48940,
	48946,
	49041,
	49044,
	49065,
	49093,
	49184,
	49391,
	49394,
	49436,
	49457,
	49548};
	//}



	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}

void k_dt_getHolidays_TARGET(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36161,
	36519,
	36520,
	36526,
	36885,
	36886,
	36892,
	36994,
	36997,
	37250,
	37251,
	37257,
	37344,
	37347,
	37615,
	37616,
	37622,
	37729,
	37732,
	37980,
	37981,
	37987,
	38086,
	38089,
	38346,
	38347,
	38353,
	38436,
	38439,
	38711,
	38712,
	38718,
	38821,
	38824,
	39076,
	39077,
	39083,
	39178,
	39181,
	39441,
	39442,
	39448,
	39528,
	39531,
	39807,
	39808,
	39814,
	39916,
	40172,
	40173,
	40179,
	40273,
	40537,
	40538,
	40544,
	40658,
	40902,
	40903,
	40909,
	41008,
	41268,
	41269,
	41275,
	41365,
	41633,
	41634,
	41640,
	41750,
	41998,
	41999,
	42005,
	42100,
	42363,
	42364,
	42370,
	42457,
	42729,
	42730,
	42736,
	42842,
	43094,
	43095,
	43101,
	43192,
	43459,
	43460,
	43466,
	43574,
	43577,
	43824,
	43825,
	43831,
	43931,
	43934,
	44190,
	44191,
	44197,
	44288,
	44291,
	44555,
	44556,
	44562,
	44666,
	44669,
	44920,
	44921,
	44927,
	45023,
	45026,
	45285,
	45286,
	45292,
	45380,
	45383,
	45651,
	45652,
	45658,
	45765,
	45768,
	46016,
	46017,
	46023,
	46115,
	46118,
	46381,
	46382,
	46388,
	46472,
	46475,
	46746,
	46747,
	46753,
	46857,
	46860,
	47112,
	47113,
	47119,
	47207,
	47210,
	47477,
	47478,
	47592,
	47595,
	47949,
	47952,
	48299,
	48302,
	48684,
	48687,
	49041,
	49044,
	49391,
	49394};
	//}



	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}
void k_dt_getHolidays_TOKYO(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36161,
	36162,
	36163,
	36202,
	36279,
	36283,
	36284,
	36285,
	36467,
	36487,
	36517,
	36525,
	36526,
	36527,
	36528,
	36567,
	36645,
	36649,
	36650,
	36651,
	36833,
	36853,
	36883,
	36891,
	36892,
	36893,
	36894,
	36899,
	36933,
	36934,
	36970,
	37010,
	37011,
	37014,
	37015,
	37016,
	37158,
	37172,
	37198,
	37218,
	37248,
	37249,
	37256,
	37257,
	37258,
	37259,
	37270,
	37298,
	37336,
	37375,
	37379,
	37380,
	37381,
	37515,
	37543,
	37563,
	37564,
	37583,
	37613,
	37621,
	37622,
	37623,
	37624,
	37634,
	37663,
	37701,
	37740,
	37744,
	37745,
	37746,
	37823,
	37879,
	37907,
	37928,
	37948,
	37949,
	37978,
	37986,
	37987,
	37988,
	37989,
	37998,
	38028,
	38106,
	38110,
	38111,
	38112,
	38187,
	38250,
	38271,
	38294,
	38314,
	38344,
	38352,
	38353,
	38354,
	38355,
	38362,
	38394,
	38432,
	38471,
	38475,
	38476,
	38477,
	38551,
	38614,
	38635,
	38659,
	38679,
	38709,
	38717,
	38718,
	38719,
	38720,
	38726,
	38759,
	38797,
	38836,
	38840,
	38841,
	38842,
	38915,
	38978,
	38999,
	39024,
	39044,
	39074,
	39082,
	39083,
	39084,
	39085,
	39090,
	39124,
	39125,
	39162,
	39201,
	39202,
	39205,
	39206,
	39207,
	39279,
	39342,
	39349,
	39363,
	39389,
	39409,
	39439,
	39440,
	39447,
	39448,
	39449,
	39450,
	39461,
	39489,
	39527,
	39567,
	39571,
	39572,
	39573,
	39650,
	39706,
	39734,
	39755,
	39775,
	39776,
	39805,
	39813,
	39814,
	39815,
	39816,
	39825,
	39855,
	39892,
	39932,
	39936,
	39937,
	39938,
	40014,
	40077,
	40078,
	40098,
	40120,
	40140,
	40170,
	40178,
	40179,
	40180,
	40181,
	40189,
	40220,
	40259,
	40297,
	40301,
	40302,
	40303,
	40378,
	40441,
	40462,
	40485,
	40505,
	40535,
	40543,
	40544,
	40545,
	40546,
	40553,
	40585,
	40623,
	40662,
	40666,
	40667,
	40668,
	40742,
	40805,
	40826,
	40850,
	40870,
	40900,
	40908,
	40909,
	40910,
	40911,
	40917,
	40950,
	40988,
	41028,
	41029,
	41032,
	41033,
	41034,
	41106,
	41169,
	41190,
	41216,
	41236,
	41266,
	41267,
	41274,
	41275,
	41276,
	41277,
	41288,
	41316,
	41353,
	41393,
	41397,
	41398,
	41399,
	41400,
	41470,
	41533,
	41561,
	41581,
	41582,
	41601,
	41631,
	41639,
	41640,
	41641,
	41642,
	41652,
	41681,
	41719,
	41758,
	41762,
	41763,
	41764,
	41841,
	41897,
	41925,
	41946,
	41966,
	41967,
	41996,
	42004,
	42005,
	42006,
	42007,
	42016,
	42046,
	42123,
	42127,
	42128,
	42129,
	42205,
	42268,
	42269,
	42289,
	42311,
	42331,
	42361,
	42369,
	42370,
	42371,
	42372,
	42380,
	42411,
	42450,
	42489,
	42493,
	42494,
	42495,
	42569,
	42632,
	42635,
	42653,
	42677,
	42697,
	42727,
	42735,
	42736,
	42737,
	42738,
	42744,
	42777,
	42814,
	42854,
	42858,
	42859,
	42860,
	42933,
	42996,
	43017,
	43042,
	43062,
	43092,
	43100,
	43101,
	43102,
	43103,
	43108,
	43142,
	43143,
	43180,
	43219,
	43220,
	43223,
	43224,
	43225,
	43297,
	43360,
	43367,
	43381,
	43407,
	43427,
	43457,
	43458,
	43465,
	43466,
	43467,
	43468,
	43479,
	43507,
	43545,
	43584,
	43588,
	43589,
	43590,
	43591,
	43661,
	43724,
	43731,
	43752,
	43772,
	43773,
	43792,
	43822,
	43830,
	43831,
	43832,
	43833,
	43843,
	43872,
	43910,
	43950,
	43954,
	43955,
	43956,
	44032,
	44095,
	44096,
	44116,
	44138,
	44158,
	44188,
	44196,
	44197,
	44198,
	44199,
	44207,
	44238,
	44315,
	44319,
	44320,
	44321,
	44396,
	44459,
	44480,
	44503,
	44523,
	44553,
	44561,
	44562,
	44563,
	44564,
	44571,
	44603,
	44641,
	44680,
	44684,
	44685,
	44686,
	44760,
	44823,
	44844,
	44868,
	44888,
	44918,
	44926,
	44927,
	44928,
	44929,
	44935,
	44968,
	45006,
	45045,
	45049,
	45050,
	45051,
	45124,
	45187,
	45208,
	45233,
	45253,
	45283,
	45291,
	45292,
	45293,
	45294,
	45299,
	45333,
	45334,
	45371,
	45411,
	45415,
	45416,
	45417,
	45418,
	45488,
	45551,
	45579,
	45599,
	45600,
	45619,
	45649,
	45657,
	45658,
	45659,
	45660,
	45670,
	45699,
	45736,
	45776,
	45780,
	45781,
	45782,
	45859,
	45915,
	45943,
	45964,
	45984,
	45985,
	46014,
	46022,
	46023,
	46024,
	46025,
	46034,
	46064,
	46101,
	46141,
	46145,
	46146,
	46147,
	46223,
	46286,
	46307,
	46329,
	46349,
	46379,
	46387,
	46388,
	46389,
	46390,
	46398,
	46429,
	46468,
	46506,
	46510,
	46511,
	46512,
	46587,
	46650,
	46671,
	46694,
	46714,
	46744,
	46752,
	46753,
	46754,
	46755,
	46762,
	46794,
	46832,
	46872,
	46876,
	46877,
	46878,
	46951,
	47014,
	47018,
	47035,
	47060,
	47080,
	47110,
	47118,
	47119,
	47120,
	47121,
	47126,
	47160,
	47161,
	47197,
	47237,
	47238,
	47241,
	47242,
	47243,
	47315,
	47378,
	47385,
	47399,
	47425,
	47445,
	47475,
	47476,
	47483,
	47497,
	47562,
	47609,
	47679,
	47742,
	47770,
	47791,
	47861,
	47928,
	48050,
	48106,
	48134,
	48176,
	48225,
	48414,
	48477,
	48479,
	48498,
	48589,
	48659,
	48778,
	48841,
	48862,
	48953,
	49023,
	49142,
	49205,
	49226,
	49317,
	49352,
	49389,
	49429,
	49506,
	49569,
	49576,
	49590,
	49667};
	//}

	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}
void k_dt_getHolidays_NEW_YORK_LONDON(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36161,
	36178,
	36206,
	36311,
	36345,
	36346,
	36409,
	36444,
	36475,
	36489,
	36519,
	36520,
	36521,
	36522,
	36523,
	36524,
	36525,
	36526,
	36528,
	36529,
	36530,
	36531,
	36532,
	36542,
	36577,
	36675,
	36711,
	36773,
	36808,
	36841,
	36853,
	36885,
	36886,
	36892,
	36906,
	36941,
	36994,
	36997,
	37018,
	37039,
	37076,
	37130,
	37137,
	37172,
	37206,
	37207,
	37217,
	37250,
	37251,
	37257,
	37277,
	37305,
	37344,
	37347,
	37382,
	37403,
	37411,
	37441,
	37494,
	37501,
	37543,
	37571,
	37588,
	37615,
	37616,
	37622,
	37641,
	37669,
	37729,
	37732,
	37746,
	37767,
	37806,
	37858,
	37865,
	37907,
	37936,
	37952,
	37980,
	37981,
	37987,
	38005,
	38033,
	38086,
	38089,
	38110,
	38138,
	38172,
	38173,
	38229,
	38236,
	38271,
	38302,
	38316,
	38346,
	38347,
	38348,
	38349,
	38353,
	38355,
	38369,
	38404,
	38436,
	38439,
	38474,
	38502,
	38537,
	38593,
	38600,
	38635,
	38667,
	38680,
	38711,
	38712,
	38713,
	38718,
	38719,
	38733,
	38768,
	38821,
	38824,
	38838,
	38866,
	38902,
	38957,
	38964,
	38999,
	39032,
	39044,
	39076,
	39077,
	39083,
	39097,
	39132,
	39178,
	39181,
	39209,
	39230,
	39267,
	39321,
	39328,
	39363,
	39397,
	39398,
	39408,
	39441,
	39442,
	39448,
	39468,
	39496,
	39528,
	39531,
	39573,
	39594,
	39633,
	39685,
	39692,
	39734,
	39763,
	39779,
	39807,
	39808,
	39814,
	39832,
	39860,
	39913,
	39916,
	39937,
	39958,
	39997,
	39998,
	40056,
	40063,
	40098,
	40128,
	40143,
	40172,
	40173,
	40175,
	40179,
	40196,
	40224,
	40270,
	40273,
	40301,
	40329,
	40363,
	40364,
	40420,
	40427,
	40462,
	40493,
	40507,
	40537,
	40538,
	40539,
	40540,
	40544,
	40546,
	40560,
	40595,
	40655,
	40658,
	40665,
	40693,
	40728,
	40784,
	40791,
	40826,
	40858,
	40871,
	40902,
	40903,
	40904,
	40909,
	40910,
	40924,
	40959,
	41005,
	41008,
	41036,
	41057,
	41094,
	41148,
	41155,
	41190,
	41224,
	41225,
	41235,
	41268,
	41269,
	41275,
	41295,
	41323,
	41362,
	41365,
	41400,
	41421,
	41459,
	41512,
	41519,
	41561,
	41589,
	41606,
	41633,
	41634,
	41640,
	41659,
	41687,
	41747,
	41750,
	41764,
	41785,
	41824,
	41876,
	41883,
	41925,
	41954,
	41970,
	41998,
	41999,
	42005,
	42023,
	42051,
	42097,
	42100,
	42128,
	42149,
	42188,
	42189,
	42247,
	42254,
	42289,
	42319,
	42334,
	42363,
	42364,
	42366,
	42370,
	42387,
	42415,
	42454,
	42457,
	42492,
	42520,
	42555,
	42611,
	42618,
	42653,
	42685,
	42698,
	42729,
	42730,
	42731,
	42736,
	42737,
	42751,
	42786,
	42839,
	42842,
	42856,
	42884,
	42920,
	42975,
	42982,
	43017,
	43050,
	43062,
	43094,
	43095,
	43101,
	43115,
	43150,
	43189,
	43192,
	43227,
	43248,
	43285,
	43339,
	43346,
	43381,
	43415,
	43416,
	43426,
	43459,
	43460,
	43466,
	43486,
	43514,
	43574,
	43577,
	43591,
	43612,
	43650,
	43703,
	43710,
	43752,
	43780,
	43797,
	43824,
	43825,
	43831,
	43850,
	43878,
	43931,
	43934,
	43955,
	43976,
	44015,
	44016,
	44074,
	44081,
	44116,
	44146,
	44161,
	44190,
	44191,
	44193,
	44197,
	44214,
	44242,
	44288,
	44291,
	44319,
	44347,
	44381,
	44382,
	44438,
	44445,
	44480,
	44511,
	44525,
	44555,
	44556,
	44557,
	44558,
	44562,
	44564,
	44578,
	44613,
	44666,
	44669,
	44683,
	44711,
	44746,
	44802,
	44809,
	44844,
	44876,
	44889,
	44920,
	44921,
	44922,
	44927,
	44928,
	44942,
	44977,
	45023,
	45026,
	45047,
	45075,
	45111,
	45166,
	45173,
	45208,
	45241,
	45253,
	45285,
	45286,
	45292,
	45306,
	45341,
	45380,
	45383,
	45418,
	45439,
	45477,
	45530,
	45537,
	45579,
	45607,
	45624,
	45651,
	45652,
	45658,
	45677,
	45705,
	45765,
	45768,
	45782,
	45803,
	45842,
	45894,
	45901,
	45943,
	45972,
	45988,
	46016,
	46017,
	46023,
	46041,
	46069,
	46115,
	46118,
	46146,
	46167,
	46207,
	46265,
	46272,
	46307,
	46337,
	46352,
	46381,
	46382,
	46384,
	46388,
	46405,
	46433,
	46472,
	46475,
	46510,
	46538,
	46572,
	46573,
	46629,
	46636,
	46671,
	46702,
	46716,
	46746,
	46747,
	46748,
	46749,
	46753,
	46755,
	46769,
	46804,
	46857,
	46860,
	46874,
	46902,
	46938,
	46993,
	47000,
	47035,
	47068,
	47080,
	47112,
	47113,
	47119,
	47133,
	47168,
	47207,
	47210,
	47245,
	47266,
	47303,
	47357,
	47364,
	47399,
	47433,
	47434,
	47444,
	47477,
	47478,
	47504,
	47532,
	47592,
	47595,
	47609,
	47630,
	47721,
	47728,
	47770,
	47815,
	47868,
	47896,
	47949,
	47952,
	47973,
	47994,
	48085,
	48092,
	48134,
	48179,
	48232,
	48260,
	48299,
	48302,
	48337,
	48365,
	48400,
	48456,
	48463,
	48498,
	48543,
	48575,
	48576,
	48582,
	48596,
	48631,
	48684,
	48687,
	48701,
	48729,
	48820,
	48827,
	48862,
	48907,
	48939,
	48940,
	48946,
	48960,
	48995,
	49041,
	49044,
	49065,
	49093,
	49184,
	49191,
	49226,
	49271,
	49324,
	49359,
	49391,
	49394,
	49436,
	49457,
	49548,
	49555,
	49590,
	49625,
	49635};
	//}

	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}
void k_dt_getHolidays_SEOUL_NEW_YORK(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36154,
	36161,
	36178,
	36206,
	36207,
	36208,
	36220,
	36255,
	36285,
	36311,
	36345,
	36346,
	36409,
	36426,
	36427,
	36444,
	36475,
	36489,
	36519,
	36521,
	36522,
	36523,
	36524,
	36525,
	36526,
	36528,
	36529,
	36530,
	36531,
	36532,
	36542,
	36560,
	36577,
	36586,
	36621,
	36647,
	36651,
	36657,
	36675,
	36683,
	36711,
	36724,
	36753,
	36773,
	36780,
	36781,
	36782,
	36802,
	36808,
	36841,
	36853,
	36885,
	36892,
	36906,
	36914,
	36915,
	36916,
	36941,
	36951,
	36986,
	37012,
	37039,
	37048,
	37076,
	37089,
	37118,
	37137,
	37165,
	37166,
	37167,
	37172,
	37206,
	37207,
	37217,
	37250,
	37257,
	37277,
	37298,
	37299,
	37300,
	37305,
	37316,
	37351,
	37377,
	37403,
	37413,
	37420,
	37438,
	37441,
	37454,
	37483,
	37501,
	37519,
	37532,
	37543,
	37571,
	37588,
	37609,
	37615,
	37622,
	37641,
	37652,
	37669,
	37742,
	37746,
	37749,
	37767,
	37778,
	37806,
	37819,
	37848,
	37865,
	37874,
	37875,
	37876,
	37897,
	37907,
	37936,
	37952,
	37980,
	37987,
	38005,
	38007,
	38008,
	38009,
	38033,
	38047,
	38082,
	38092,
	38112,
	38133,
	38138,
	38172,
	38173,
	38236,
	38257,
	38258,
	38259,
	38271,
	38302,
	38316,
	38346,
	38353,
	38369,
	38391,
	38392,
	38393,
	38404,
	38412,
	38447,
	38477,
	38502,
	38509,
	38537,
	38579,
	38600,
	38614,
	38628,
	38635,
	38667,
	38680,
	38711,
	38712,
	38718,
	38719,
	38733,
	38747,
	38768,
	38777,
	38821,
	38838,
	38842,
	38866,
	38868,
	38874,
	38902,
	38915,
	38944,
	38964,
	38993,
	38995,
	38996,
	38999,
	39032,
	39044,
	39076,
	39083,
	39097,
	39132,
	39142,
	39203,
	39226,
	39230,
	39239,
	39267,
	39280,
	39309,
	39328,
	39349,
	39350,
	39351,
	39358,
	39363,
	39397,
	39398,
	39408,
	39435,
	39441,
	39448,
	39468,
	39484,
	39485,
	39486,
	39496,
	39528,
	39547,
	39569,
	39573,
	39580,
	39594,
	39605,
	39633,
	39675,
	39692,
	39706,
	39724,
	39734,
	39763,
	39779,
	39807,
	39814,
	39832,
	39839,
	39840,
	39860,
	39934,
	39938,
	39958,
	39997,
	39998,
	40063,
	40088,
	40098,
	40128,
	40143,
	40172,
	40179,
	40196,
	40224,
	40238,
	40270,
	40303,
	40319,
	40329,
	40363,
	40364,
	40427,
	40442,
	40443,
	40444,
	40462,
	40493,
	40507,
	40537,
	40544,
	40560,
	40576,
	40577,
	40578,
	40595,
	40603,
	40655,
	40668,
	40673,
	40693,
	40700,
	40728,
	40770,
	40791,
	40798,
	40799,
	40819,
	40826,
	40858,
	40871,
	40902,
	40903,
	40909,
	40910,
	40924,
	40931,
	40932,
	40959,
	40969,
	41005,
	41030,
	41057,
	41066,
	41094,
	41136,
	41155,
	41183,
	41185,
	41190,
	41224,
	41225,
	41235,
	41268,
	41275,
	41295,
	41316,
	41323,
	41334,
	41362,
	41395,
	41411,
	41421,
	41431,
	41459,
	41501,
	41519,
	41535,
	41536,
	41537,
	41550,
	41561,
	41589,
	41606,
	41633,
	41640,
	41659,
	41669,
	41670,
	41687,
	41747,
	41760,
	41764,
	41765,
	41785,
	41796,
	41824,
	41866,
	41883,
	41890,
	41891,
	41915,
	41925,
	41954,
	41970,
	41998,
	42005,
	42023,
	42051,
	42053,
	42054,
	42055,
	42097,
	42125,
	42129,
	42149,
	42188,
	42189,
	42254,
	42275,
	42289,
	42319,
	42334,
	42363,
	42370,
	42387,
	42415,
	42430,
	42454,
	42495,
	42520,
	42527,
	42555,
	42597,
	42618,
	42646,
	42653,
	42685,
	42698,
	42729,
	42730,
	42736,
	42737,
	42751,
	42786,
	42795,
	42839,
	42856,
	42858,
	42860,
	42884,
	42892,
	42920,
	42962,
	42982,
	43011,
	43012,
	43013,
	43017,
	43050,
	43062,
	43094,
	43101,
	43115,
	43146,
	43147,
	43150,
	43160,
	43189,
	43221,
	43248,
	43257,
	43285,
	43327,
	43346,
	43367,
	43368,
	43376,
	43381,
	43415,
	43416,
	43426,
	43459,
	43466,
	43486,
	43514,
	43525,
	43574,
	43586,
	43612,
	43622,
	43650,
	43692,
	43710,
	43741,
	43752,
	43780,
	43797,
	43824,
	43831,
	43850,
	43878,
	43931,
	43952,
	43956,
	43976,
	44015,
	44016,
	44081,
	44116,
	44146,
	44161,
	44190,
	44197,
	44214,
	44242,
	44256,
	44321,
	44347,
	44381,
	44382,
	44445,
	44480,
	44511,
	44525,
	44555,
	44562,
	44578,
	44613,
	44621,
	44686,
	44711,
	44718,
	44746,
	44788,
	44809,
	44837,
	44844,
	44876,
	44889,
	44920,
	44921,
	44927,
	44928,
	44942,
	44977,
	44986,
	45047,
	45051,
	45075,
	45083,
	45111,
	45153,
	45173,
	45202,
	45208,
	45241,
	45253,
	45285,
	45292,
	45306,
	45341,
	45352,
	45413,
	45439,
	45449,
	45477,
	45519,
	45537,
	45568,
	45579,
	45607,
	45624,
	45651,
	45658,
	45677,
	45705,
	45778,
	45782,
	45803,
	45814,
	45842,
	45884,
	45901,
	45933,
	45943,
	45972,
	45988,
	46016,
	46023,
	46041,
	46069,
	46143,
	46147,
	46167,
	46207,
	46272,
	46307,
	46337,
	46352,
	46381,
	46388,
	46405,
	46433,
	46447,
	46512,
	46538,
	46572,
	46573,
	46636,
	46671,
	46702,
	46716,
	46746,
	46753,
	46769,
	46804,
	46813,
	46874,
	46878,
	46902,
	46910,
	46938,
	46980,
	47000,
	47029,
	47035,
	47068,
	47080,
	47112,
	47119,
	47133,
	47168,
	47178,
	47239,
	47266,
	47275,
	47303,
	47345,
	47364,
	47394,
	47399,
	47433,
	47434,
	47444,
	47477,
	47504,
	47532,
	47630,
	47728,
	47770,
	47815,
	47868,
	47896,
	47994,
	48092,
	48134,
	48179,
	48232,
	48260,
	48365,
	48400,
	48463,
	48498,
	48543,
	48596,
	48631,
	48729,
	48827,
	48862,
	48907,
	48939,
	48946,
	48960,
	48995,
	49093,
	49191,
	49226,
	49271,
	49324,
	49359,
	49457,
	49555,
	49590,
	49625,
	49635};
	//}

	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}
void k_dt_getHolidays_TARGET_NEW_YORK(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36161,
	36178,
	36206,
	36311,
	36345,
	36346,
	36409,
	36444,
	36475,
	36489,
	36519,
	36520,
	36521,
	36522,
	36523,
	36524,
	36525,
	36526,
	36528,
	36529,
	36530,
	36531,
	36532,
	36542,
	36577,
	36675,
	36711,
	36773,
	36808,
	36841,
	36853,
	36885,
	36886,
	36892,
	36906,
	36941,
	36994,
	36997,
	37039,
	37076,
	37137,
	37172,
	37206,
	37207,
	37217,
	37250,
	37251,
	37257,
	37277,
	37305,
	37344,
	37347,
	37403,
	37441,
	37501,
	37543,
	37571,
	37588,
	37615,
	37616,
	37622,
	37641,
	37669,
	37729,
	37732,
	37767,
	37806,
	37865,
	37907,
	37936,
	37952,
	37980,
	37981,
	37987,
	38005,
	38033,
	38086,
	38089,
	38138,
	38172,
	38173,
	38236,
	38271,
	38302,
	38316,
	38346,
	38347,
	38353,
	38369,
	38404,
	38436,
	38439,
	38502,
	38537,
	38600,
	38635,
	38667,
	38680,
	38711,
	38712,
	38718,
	38719,
	38733,
	38768,
	38821,
	38824,
	38866,
	38902,
	38964,
	38999,
	39032,
	39044,
	39076,
	39077,
	39083,
	39097,
	39132,
	39178,
	39181,
	39230,
	39267,
	39328,
	39363,
	39397,
	39398,
	39408,
	39441,
	39442,
	39448,
	39468,
	39496,
	39528,
	39531,
	39594,
	39633,
	39692,
	39734,
	39763,
	39779,
	39807,
	39808,
	39814,
	39832,
	39860,
	39916,
	39958,
	39997,
	39998,
	40063,
	40098,
	40128,
	40143,
	40172,
	40173,
	40179,
	40196,
	40224,
	40270,
	40273,
	40329,
	40363,
	40364,
	40427,
	40462,
	40493,
	40507,
	40537,
	40538,
	40544,
	40560,
	40595,
	40655,
	40658,
	40693,
	40728,
	40791,
	40826,
	40858,
	40871,
	40902,
	40903,
	40909,
	40910,
	40924,
	40959,
	41005,
	41008,
	41057,
	41094,
	41155,
	41190,
	41224,
	41225,
	41235,
	41268,
	41269,
	41275,
	41295,
	41323,
	41362,
	41365,
	41421,
	41459,
	41519,
	41561,
	41589,
	41606,
	41633,
	41634,
	41640,
	41659,
	41687,
	41747,
	41750,
	41785,
	41824,
	41883,
	41925,
	41954,
	41970,
	41998,
	41999,
	42005,
	42023,
	42051,
	42097,
	42100,
	42149,
	42188,
	42189,
	42254,
	42289,
	42319,
	42334,
	42363,
	42364,
	42370,
	42387,
	42415,
	42454,
	42457,
	42520,
	42555,
	42618,
	42653,
	42685,
	42698,
	42729,
	42730,
	42736,
	42737,
	42751,
	42786,
	42839,
	42842,
	42884,
	42920,
	42982,
	43017,
	43050,
	43062,
	43094,
	43095,
	43101,
	43115,
	43150,
	43189,
	43192,
	43248,
	43285,
	43346,
	43381,
	43415,
	43416,
	43426,
	43459,
	43460,
	43466,
	43486,
	43514,
	43574,
	43577,
	43612,
	43650,
	43710,
	43752,
	43780,
	43797,
	43824,
	43825,
	43831,
	43850,
	43878,
	43931,
	43934,
	43976,
	44015,
	44016,
	44081,
	44116,
	44146,
	44161,
	44190,
	44191,
	44197,
	44214,
	44242,
	44288,
	44291,
	44347,
	44381,
	44382,
	44445,
	44480,
	44511,
	44525,
	44555,
	44556,
	44562,
	44578,
	44613,
	44666,
	44669,
	44711,
	44746,
	44809,
	44844,
	44876,
	44889,
	44920,
	44921,
	44927,
	44928,
	44942,
	44977,
	45023,
	45026,
	45075,
	45111,
	45173,
	45208,
	45241,
	45253,
	45285,
	45286,
	45292,
	45306,
	45341,
	45380,
	45383,
	45439,
	45477,
	45537,
	45579,
	45607,
	45624,
	45651,
	45652,
	45658,
	45677,
	45705,
	45765,
	45768,
	45803,
	45842,
	45901,
	45943,
	45972,
	45988,
	46016,
	46017,
	46023,
	46041,
	46069,
	46115,
	46118,
	46167,
	46207,
	46272,
	46307,
	46337,
	46352,
	46381,
	46382,
	46388,
	46405,
	46433,
	46472,
	46475,
	46538,
	46572,
	46573,
	46636,
	46671,
	46702,
	46716,
	46746,
	46747,
	46753,
	46769,
	46804,
	46857,
	46860,
	46902,
	46938,
	47000,
	47035,
	47068,
	47080,
	47112,
	47113,
	47119,
	47133,
	47168,
	47207,
	47210,
	47266,
	47303,
	47364,
	47399,
	47433,
	47434,
	47444,
	47477,
	47478,
	47504,
	47532,
	47592,
	47595,
	47630,
	47728,
	47770,
	47815,
	47868,
	47896,
	47949,
	47952,
	47994,
	48092,
	48134,
	48179,
	48232,
	48260,
	48299,
	48302,
	48365,
	48400,
	48463,
	48498,
	48543,
	48596,
	48631,
	48684,
	48687,
	48729,
	48827,
	48862,
	48907,
	48939,
	48946,
	48960,
	48995,
	49041,
	49044,
	49093,
	49191,
	49226,
	49271,
	49324,
	49359,
	49391,
	49394,
	49457,
	49555,
	49590,
	49625,
	49635};
	//}

	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}
void k_dt_getHolidays_TOKYO_NEW_YORK(vector<long> &hdays)
{
	//{
	long ihdays[]=
	{36161,
	36162,
	36163,
	36178,
	36202,
	36206,
	36279,
	36283,
	36284,
	36285,
	36311,
	36345,
	36346,
	36409,
	36444,
	36467,
	36475,
	36487,
	36489,
	36517,
	36519,
	36521,
	36522,
	36523,
	36524,
	36525,
	36526,
	36527,
	36528,
	36529,
	36530,
	36531,
	36532,
	36542,
	36567,
	36577,
	36645,
	36649,
	36650,
	36651,
	36675,
	36711,
	36773,
	36808,
	36833,
	36841,
	36853,
	36883,
	36885,
	36891,
	36892,
	36893,
	36894,
	36899,
	36906,
	36933,
	36934,
	36941,
	36970,
	37010,
	37011,
	37014,
	37015,
	37016,
	37039,
	37076,
	37137,
	37158,
	37172,
	37198,
	37206,
	37207,
	37217,
	37218,
	37248,
	37249,
	37250,
	37256,
	37257,
	37258,
	37259,
	37270,
	37277,
	37298,
	37305,
	37336,
	37375,
	37379,
	37380,
	37381,
	37403,
	37441,
	37501,
	37515,
	37543,
	37563,
	37564,
	37571,
	37583,
	37588,
	37613,
	37615,
	37621,
	37622,
	37623,
	37624,
	37634,
	37641,
	37663,
	37669,
	37701,
	37740,
	37744,
	37745,
	37746,
	37767,
	37806,
	37823,
	37865,
	37879,
	37907,
	37928,
	37936,
	37948,
	37949,
	37952,
	37978,
	37980,
	37986,
	37987,
	37988,
	37989,
	37998,
	38005,
	38028,
	38033,
	38106,
	38110,
	38111,
	38112,
	38138,
	38172,
	38173,
	38187,
	38236,
	38250,
	38271,
	38294,
	38302,
	38314,
	38316,
	38344,
	38346,
	38352,
	38353,
	38354,
	38355,
	38362,
	38369,
	38394,
	38404,
	38432,
	38471,
	38475,
	38476,
	38477,
	38502,
	38537,
	38551,
	38600,
	38614,
	38635,
	38659,
	38667,
	38679,
	38680,
	38709,
	38711,
	38712,
	38717,
	38718,
	38719,
	38720,
	38726,
	38733,
	38759,
	38768,
	38797,
	38821,
	38836,
	38840,
	38841,
	38842,
	38866,
	38902,
	38915,
	38964,
	38978,
	38999,
	39024,
	39032,
	39044,
	39074,
	39076,
	39082,
	39083,
	39084,
	39085,
	39090,
	39097,
	39124,
	39125,
	39132,
	39162,
	39201,
	39202,
	39205,
	39206,
	39207,
	39230,
	39267,
	39279,
	39328,
	39342,
	39349,
	39363,
	39389,
	39397,
	39398,
	39408,
	39409,
	39439,
	39440,
	39441,
	39447,
	39448,
	39449,
	39450,
	39461,
	39468,
	39489,
	39496,
	39527,
	39528,
	39567,
	39571,
	39572,
	39573,
	39594,
	39633,
	39650,
	39692,
	39706,
	39734,
	39755,
	39763,
	39775,
	39776,
	39779,
	39805,
	39807,
	39813,
	39814,
	39815,
	39816,
	39825,
	39832,
	39855,
	39860,
	39892,
	39932,
	39936,
	39937,
	39938,
	39958,
	39997,
	39998,
	40014,
	40063,
	40077,
	40078,
	40098,
	40120,
	40128,
	40140,
	40143,
	40170,
	40172,
	40178,
	40179,
	40180,
	40181,
	40189,
	40196,
	40220,
	40224,
	40259,
	40270,
	40297,
	40301,
	40302,
	40303,
	40329,
	40363,
	40364,
	40378,
	40427,
	40441,
	40462,
	40485,
	40493,
	40505,
	40507,
	40535,
	40537,
	40543,
	40544,
	40545,
	40546,
	40553,
	40560,
	40585,
	40595,
	40623,
	40655,
	40662,
	40666,
	40667,
	40668,
	40693,
	40728,
	40742,
	40791,
	40805,
	40826,
	40850,
	40858,
	40870,
	40871,
	40900,
	40902,
	40903,
	40908,
	40909,
	40910,
	40911,
	40917,
	40924,
	40950,
	40959,
	40988,
	41005,
	41028,
	41029,
	41032,
	41033,
	41034,
	41057,
	41094,
	41106,
	41155,
	41169,
	41190,
	41216,
	41224,
	41225,
	41235,
	41236,
	41266,
	41267,
	41268,
	41274,
	41275,
	41276,
	41277,
	41288,
	41295,
	41316,
	41323,
	41353,
	41362,
	41393,
	41397,
	41398,
	41399,
	41400,
	41421,
	41459,
	41470,
	41519,
	41533,
	41561,
	41581,
	41582,
	41589,
	41601,
	41606,
	41631,
	41633,
	41639,
	41640,
	41641,
	41642,
	41652,
	41659,
	41681,
	41687,
	41719,
	41747,
	41758,
	41762,
	41763,
	41764,
	41785,
	41824,
	41841,
	41883,
	41897,
	41925,
	41946,
	41954,
	41966,
	41967,
	41970,
	41996,
	41998,
	42004,
	42005,
	42006,
	42007,
	42016,
	42023,
	42046,
	42051,
	42097,
	42123,
	42127,
	42128,
	42129,
	42149,
	42188,
	42189,
	42205,
	42254,
	42268,
	42269,
	42289,
	42311,
	42319,
	42331,
	42334,
	42361,
	42363,
	42369,
	42370,
	42371,
	42372,
	42380,
	42387,
	42411,
	42415,
	42450,
	42454,
	42489,
	42493,
	42494,
	42495,
	42520,
	42555,
	42569,
	42618,
	42632,
	42635,
	42653,
	42677,
	42685,
	42697,
	42698,
	42727,
	42729,
	42730,
	42735,
	42736,
	42737,
	42738,
	42744,
	42751,
	42777,
	42786,
	42814,
	42839,
	42854,
	42858,
	42859,
	42860,
	42884,
	42920,
	42933,
	42982,
	42996,
	43017,
	43042,
	43050,
	43062,
	43092,
	43094,
	43100,
	43101,
	43102,
	43103,
	43108,
	43115,
	43142,
	43143,
	43150,
	43180,
	43189,
	43219,
	43220,
	43223,
	43224,
	43225,
	43248,
	43285,
	43297,
	43346,
	43360,
	43367,
	43381,
	43407,
	43415,
	43416,
	43426,
	43427,
	43457,
	43458,
	43459,
	43465,
	43466,
	43467,
	43468,
	43479,
	43486,
	43507,
	43514,
	43545,
	43574,
	43584,
	43588,
	43589,
	43590,
	43591,
	43612,
	43650,
	43661,
	43710,
	43724,
	43731,
	43752,
	43772,
	43773,
	43780,
	43792,
	43797,
	43822,
	43824,
	43830,
	43831,
	43832,
	43833,
	43843,
	43850,
	43872,
	43878,
	43910,
	43931,
	43950,
	43954,
	43955,
	43956,
	43976,
	44015,
	44016,
	44032,
	44081,
	44095,
	44096,
	44116,
	44138,
	44146,
	44158,
	44161,
	44188,
	44190,
	44196,
	44197,
	44198,
	44199,
	44207,
	44214,
	44238,
	44242,
	44315,
	44319,
	44320,
	44321,
	44347,
	44381,
	44382,
	44396,
	44445,
	44459,
	44480,
	44503,
	44511,
	44523,
	44525,
	44553,
	44555,
	44561,
	44562,
	44563,
	44564,
	44571,
	44578,
	44603,
	44613,
	44641,
	44680,
	44684,
	44685,
	44686,
	44711,
	44746,
	44760,
	44809,
	44823,
	44844,
	44868,
	44876,
	44888,
	44889,
	44918,
	44920,
	44921,
	44926,
	44927,
	44928,
	44929,
	44935,
	44942,
	44968,
	44977,
	45006,
	45045,
	45049,
	45050,
	45051,
	45075,
	45111,
	45124,
	45173,
	45187,
	45208,
	45233,
	45241,
	45253,
	45283,
	45285,
	45291,
	45292,
	45293,
	45294,
	45299,
	45306,
	45333,
	45334,
	45341,
	45371,
	45411,
	45415,
	45416,
	45417,
	45418,
	45439,
	45477,
	45488,
	45537,
	45551,
	45579,
	45599,
	45600,
	45607,
	45619,
	45624,
	45649,
	45651,
	45657,
	45658,
	45659,
	45660,
	45670,
	45677,
	45699,
	45705,
	45736,
	45776,
	45780,
	45781,
	45782,
	45803,
	45842,
	45859,
	45901,
	45915,
	45943,
	45964,
	45972,
	45984,
	45985,
	45988,
	46014,
	46016,
	46022,
	46023,
	46024,
	46025,
	46034,
	46041,
	46064,
	46069,
	46101,
	46141,
	46145,
	46146,
	46147,
	46167,
	46207,
	46223,
	46272,
	46286,
	46307,
	46329,
	46337,
	46349,
	46352,
	46379,
	46381,
	46387,
	46388,
	46389,
	46390,
	46398,
	46405,
	46429,
	46433,
	46468,
	46506,
	46510,
	46511,
	46512,
	46538,
	46572,
	46573,
	46587,
	46636,
	46650,
	46671,
	46694,
	46702,
	46714,
	46716,
	46744,
	46746,
	46752,
	46753,
	46754,
	46755,
	46762,
	46769,
	46794,
	46804,
	46832,
	46872,
	46876,
	46877,
	46878,
	46902,
	46938,
	46951,
	47000,
	47014,
	47018,
	47035,
	47060,
	47068,
	47080,
	47110,
	47112,
	47118,
	47119,
	47120,
	47121,
	47126,
	47133,
	47160,
	47161,
	47168,
	47197,
	47237,
	47238,
	47241,
	47242,
	47243,
	47266,
	47303,
	47315,
	47364,
	47378,
	47385,
	47399,
	47425,
	47433,
	47434,
	47444,
	47445,
	47475,
	47476,
	47477,
	47483,
	47497,
	47504,
	47532,
	47562,
	47609,
	47630,
	47679,
	47728,
	47742,
	47770,
	47791,
	47815,
	47861,
	47868,
	47896,
	47928,
	47994,
	48050,
	48092,
	48106,
	48134,
	48176,
	48179,
	48225,
	48232,
	48260,
	48365,
	48400,
	48414,
	48463,
	48477,
	48479,
	48498,
	48543,
	48589,
	48596,
	48631,
	48659,
	48729,
	48778,
	48827,
	48841,
	48862,
	48907,
	48939,
	48946,
	48953,
	48960,
	48995,
	49023,
	49093,
	49142,
	49191,
	49205,
	49226,
	49271,
	49317,
	49324,
	49352,
	49359,
	49389,
	49429,
	49457,
	49506,
	49555,
	49569,
	49576,
	49590,
	49625,
	49635,
	49667};
	//}

	int iSize=sizeof(ihdays)/sizeof(ihdays[0]);
	hdays.resize(iSize);
	for(int i=0;i<iSize;i++)
		hdays[i]=ihdays[i];
}